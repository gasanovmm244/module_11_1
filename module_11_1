import requests

# Запрос данных с сайта
response = requests.get('https://api.github.com')
# Вывод ответа в консоль
print(response.json())  # Печать JSON-ответа от GitHub API
# JSON - текстовый формат обмена данными, который используется для передачи данных между сервером и клиентом
print("\n Код requests завершён \n")

# Возможности библиотеки requests:
# отправка HTTP-запросов (GET, POST, PUT, DELETE и т.д.);
# управление заголовками запросов;
# обработка параметров и данных формы;
# работа с ответами, включая статус-коды и содержимое.


import pandas as pd

# Создание DataFrame из списка словарей
data = [{'name': 'Денис', 'age': 30}, {'name': 'Макс', 'age': 25}]
df = pd.DataFrame(data)

print(df)
print()

# Фильтрация данных по условию
older_than_25 = df[df['age'] > 25]
print(older_than_25)
print()

# Группировка данных по столбцу
grouped_by_age = df.groupby('age')
print(grouped_by_age)
print()

# Сортировка данных по столбцам
sorted_df = df.sort_values(['age'], ascending=False)
print(sorted_df)
print()

# Агрегация данных
total_ages = df['age'].sum()
print(f"Сумма возрастов: {total_ages}")
print("\n Код pandas завершён \n")

#Основные функции Pandas:
#cоздание и работа с DataFrame — это основной объект в Pandas, который представляет собой двумерную структуру данных,
#похожую на таблицу в Excel;
#cериализация данных — возможность преобразования данных в различные форматы, такие как CSV, JSON, HTML и другие;
#манипуляция данными — возможность фильтрации, сортировки, группировки и агрегирования данных;
#анализ временных рядов — возможность работы с данными, которые изменяются со временем, такими как финансовые
#или метеорологические данные;
#визуализация данных — возможность создания графиков и диаграмм для наглядного представления данных.

import numpy as np

# Массивы:

# Создание одномерного массива целых чисел от 0 до 9
a = np.arange(10)
print(a)
print()

# Создание двумерного массива случайных вещественных чисел размером 5x5
b = np.random.rand(5, 5)
print(b)
print()


# Операции с массивами:

# Сложение двух массивов
a = np.arange(10)
b = np.ones(10) * 3
c = a + b
print(c)
print()

# Умножение массивов
d = np.arange(9).reshape(3, 3)
e = np.ones((3, 3))
f = d * e
print(f)
print("\n Код NumPy завершён \n")

#Основные возможности и функции библиотеки NumPy:

#NumPy - это мощный класс ndarray, который представляет собой многомерный массив чисел,
#символов или объектов. Массивы NumPy могут быть одномерными, двумерными, трехмерными и так далее;

#NumPy поддерживает широкий спектр операций с массивами, включая сложение, вычитание, умножение, деление,
#логические операции и т.д. Эти операции выполняются параллельно для всех элементов массива,
#что значительно ускоряет вычисления;

#NumPy предоставляет множество функций и методов для работы с массивами, включая линейную алгебру
#(например, умножение матриц), статистику (среднее значение, стандартное отклонение) и обработку изображений
#(преобразование Фурье).
